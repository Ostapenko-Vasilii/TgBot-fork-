require('dotenv').config();
const fs = require('fs');
const path = require('path');
const { Bot, GrammyError, HttpError, Keyboard, InlineKeyboard, session } = require('grammy');
const sqlite3 = require('sqlite3').verbose();
const { open } = require('sqlite');
const { logger } = require('./utils/logger');
const { updateUserData, recordUserInteraction, isAdmin, getUsageStats, getMessages } = require('./utils/helpers');

const bot = new Bot(process.env.BOT_API_KEY);

bot.use(session({
  initial: () => ({})
}));

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
async function createTables(db) {
  await db.exec(`CREATE TABLE IF NOT EXISTS users (
    id INTEGER PRIMARY KEY,
    timesStarted INTEGER DEFAULT 0,
    lastSeen TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )`);

  await db.exec(`CREATE TABLE IF NOT EXISTS interactions (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    userId INTEGER,
    interactionTime TIMESTAMP
  )`);

  await db.exec(`CREATE TABLE IF NOT EXISTS messages (
    id INTEGER PRIMARY KEY AUTOINCREMENT,
    userId INTEGER,
    message TEXT,
    media_type TEXT,
    media_id TEXT,
    replied INTEGER DEFAULT 0,
    first_name TEXT,
    username TEXT,
    timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
  )`);

  logger.info('Tables created or already exist');
}

// –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
let db;
(async () => {
  const dbPath = './userData.db';
  const dbExists = fs.existsSync(dbPath);

  db = await open({
    filename: dbPath,
    driver: sqlite3.Database
  });

  if (!dbExists) {
    await createTables(db);
  }

  logger.info('Database initialized and connection established');
})();

// –ö–æ–º–∞–Ω–¥–∞ /start
bot.command('start', async (ctx) => {
  logger.info(`User ${ctx.from.id} started the bot`);
  await updateUserData(db, ctx.from.id);
  const startKeyboard = new Keyboard()
    .text('üìÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª')
    .row();
  await ctx.reply('–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è —Å–±–æ—Ä–∞ —Ñ–∞–π–ª–æ–≤ –∫ –≤—ã–ø—É—Å–∫–Ω–æ–º—É!');
  await ctx.reply('üìÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª ‚Äî —Ç—É—Ç –≤—ã –º–æ–∂–µ—Ç–µ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª—ã –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–æ–≥–æ –∞–ª—å–±–æ–º–∞ –∏–ª–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.');
  await ctx.reply('üü¢ –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞—é—Ç—Å—è —Ñ–æ—Ç–æ, –≤–∏–¥–µ–æ, –∞—É–¥–∏–æ/–≤–∏–¥–µ–æ—Å–æ–æ–±—â–µ–Ω–∏—è, –¥–æ–∫—É–º–µ–Ω—Ç—ã.');
  await ctx.reply('–ù–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É –Ω–∏–∂–µ, —á—Ç–æ–±—ã –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª üëá', {
    reply_markup: startKeyboard,
  });
});

// –ö–æ–º–∞–Ω–¥–∞ /admin (–¥–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–≤)
bot.command('admin', async (ctx) => {
  if (isAdmin(ctx.from.id, [process.env.ADMIN_ID, process.env.ADMIN_ID2])) {
    const stats = await getUsageStats(db);
    const response = `–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –±–æ—Ç–∞ –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–æ–≥–æ:\n–í—Å–µ–≥–æ –∑–∞–ø—É—Å–∫–æ–≤: ${stats.totalStarts}\n–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–ª–∏ –±–æ—Ç–∞ —Å–µ–≥–æ–¥–Ω—è: ${stats.todayStarts}\n–í—Å–µ–≥–æ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π: ${stats.totalInteractions}\n–í–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π —Å–µ–≥–æ–¥–Ω—è: ${stats.todayInteractions}`;
    await ctx.reply(response);
  } else {
    await ctx.reply('–£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!' + ctx.from.id.toString());
  }
});

// –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–π
bot.use(async (ctx, next) => {
  await recordUserInteraction(db, ctx.from.id);
  return next();
});

let suggestionClicked = {};
let unreadMessagesCount = 0;

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –Ω–∞–∂–∞—Ç–∏—è –∫–Ω–æ–ø–∫–∏ "üìÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª"
bot.hears('üìÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª', async (ctx) => {
  if (isAdmin(ctx.from.id, [process.env.ADMIN_ID, process.env.ADMIN_ID2])) {
    console.log('Admin accessed file submissions');
    const adminKeyboard = new Keyboard()
      .text('–í—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã')
      .row()
      .text('–§–∞–π–ª—ã –±–µ–∑ –æ—Ç–≤–µ—Ç–∞')
      .row()
      .text('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è')
      .row();
    await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
      reply_markup: adminKeyboard,
    });
    suggestionClicked[ctx.from.id] = true;
  } else {
    suggestionClicked[ctx.from.id] = true;
    await ctx.reply('–û—Ç–ø—Ä–∞–≤—å—Ç–µ —Ñ–∞–π–ª, –∫–æ—Ç–æ—Ä—ã–π –≤—ã —Ö–æ—Ç–∏—Ç–µ –ø–æ–¥–µ–ª–∏—Ç—å—Å—è –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–æ–≥–æ –∞–ª—å–±–æ–º–∞ –∏–ª–∏ –ø—Ä–µ–∑–µ–Ω—Ç–∞—Ü–∏–∏.');
  }
});

// –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.hears('–í—Å–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã', async (ctx) => {
  if (!isAdmin(ctx.from.id, [process.env.ADMIN_ID, process.env.ADMIN_ID2])) return;
  const messages = await getMessages(db);
  if (messages.length === 0) {
    await ctx.reply('–§–∞–π–ª–æ–≤ –Ω–µ—Ç.');
  } else {
    for (const message of messages) {
      const inlineKeyboard = new InlineKeyboard().text('–û—Ç–≤–µ—Ç–∏—Ç—å', `reply-${message.id}`);
      const userInfo = `–§–∞–π–ª –æ—Ç ${message.first_name} (@${message.username}, ID: ${message.userId})`;

      if (message.message) {
        await ctx.reply(`${userInfo}: ${message.message}`, { reply_markup: inlineKeyboard });
      } else {
        const mediaType = message.media_type;
        if (mediaType === 'photo') {
          await ctx.api.sendPhoto(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'video') {
          await ctx.api.sendVideo(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'document') {
          await ctx.api.sendDocument(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'audio') {
          await ctx.api.sendAudio(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'voice') {
          await ctx.api.sendVoice(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'video_note') {
          await ctx.api.sendVideoNote(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        }
      }
    }
  }
});

// –ü–æ–∫–∞–∑–∞—Ç—å —Ñ–∞–π–ª—ã –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ (–¥–ª—è –∞–¥–º–∏–Ω–æ–≤)
bot.hears('–§–∞–π–ª—ã –±–µ–∑ –æ—Ç–≤–µ—Ç–∞', async (ctx) => {
  if (!isAdmin(ctx.from.id, [process.env.ADMIN_ID, process.env.ADMIN_ID2])) return;

  const messages = await getMessages(db, 0);
  if (messages.length === 0) {
    await ctx.reply('–§–∞–π–ª–æ–≤ –±–µ–∑ –æ—Ç–≤–µ—Ç–∞ –Ω–µ—Ç.');
  } else {
    for (const message of messages) {
      const inlineKeyboard = new InlineKeyboard().text('–û—Ç–≤–µ—Ç–∏—Ç—å', `reply-${message.id}`);
      const userInfo = `–§–∞–π–ª –æ—Ç ${message.first_name} (@${message.username}, ID: ${message.userId})`;

      if (message.message) {
        await ctx.reply(`${userInfo}: ${message.message}`, { reply_markup: inlineKeyboard });
      } else {
        const mediaType = message.media_type;
        if (mediaType === 'photo') {
          await ctx.api.sendPhoto(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'video') {
          await ctx.api.sendVideo(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'document') {
          await ctx.api.sendDocument(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'audio') {
          await ctx.api.sendAudio(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'voice') {
          await ctx.api.sendVoice(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        } else if (mediaType === 'video_note') {
          await ctx.api.sendVideoNote(ctx.chat.id, message.media_id, {
            caption: userInfo,
            reply_markup: inlineKeyboard
          });
        }
      }
    }
  }
});

// –ö–Ω–æ–ø–∫–∞ "–ù–∞–∑–∞–¥"
bot.hears('–ù–∞–∑–∞–¥ ‚Ü©Ô∏è', async (ctx) => {
  const startKeyboard = new Keyboard()
    .text('üìÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª')
    .row();
  await ctx.reply('–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:', {
    reply_markup: startKeyboard,
  });
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏–π –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
bot.on('message', async (ctx) => {
  const adminIds = [process.env.ADMIN_ID, process.env.ADMIN_ID2];
  const fromId = ctx.from.id.toString();

  // –û—Ç–≤–µ—Ç –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
  if (adminIds.includes(fromId) && ctx.session.replyToUser) {
    const targetMessageId = ctx.session.replyToMessageId;

    await db.run(`UPDATE messages SET replied = 1 WHERE id = ?`, [targetMessageId]);
    await ctx.api.sendMessage(ctx.session.replyToUser, '–ù–∞ –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—É—á–µ–Ω –æ—Ç–≤–µ—Ç –æ—Ç –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞ –≤—ã–ø—É—Å–∫–Ω–æ–≥–æ.');

    if (ctx.message.text) {
      await ctx.api.sendMessage(ctx.session.replyToUser, ctx.message.text);
    } else if (ctx.message.voice) {
      await ctx.api.sendVoice(ctx.session.replyToUser, ctx.message.voice.file_id);
    } else if (ctx.message.video) {
      await ctx.api.sendVideo(ctx.session.replyToUser, ctx.message.video.file_id);
    } else if (ctx.message.photo) {
      const photo = ctx.message.photo.pop();
      await ctx.api.sendPhoto(ctx.session.replyToUser, photo.file_id);
    } else if (ctx.message.audio) {
      await ctx.api.sendAudio(ctx.session.replyToUser, ctx.message.audio.file_id);
    } else if (ctx.message.document) {
      await ctx.api.sendDocument(ctx.session.replyToUser, ctx.message.document.file_id);
    } else if (ctx.message.video_note) {
      await ctx.api.sendVideoNote(ctx.session.replyToUser, ctx.message.video_note.file_id);
    }

    await ctx.reply('–û—Ç–≤–µ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω.');
    ctx.session.replyToUser = undefined;
    ctx.session.replyToMessageId = undefined;

    if (unreadMessagesCount > 0) {
      unreadMessagesCount--;
    }
    return;
  }

  // –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º
  if (suggestionClicked[fromId]) {
    console.log('User sent a file.');
    let mediaType = '';
    let mediaId = '';

    if (ctx.message.text) {
      await db.run(`INSERT INTO messages (userId, message, first_name, username) VALUES (?, ?, ?, ?)`, 
                   [ctx.from.id, ctx.message.text, ctx.from.first_name, ctx.from.username]);
    } else {
      if (ctx.message.photo) {
        const photo = ctx.message.photo.pop();
        mediaType = 'photo';
        mediaId = photo.file_id;
      } else if (ctx.message.video) {
        mediaType = 'video';
        mediaId = ctx.message.video.file_id;
      } else if (ctx.message.document) {
        mediaType = 'document';
        mediaId = ctx.message.document.file_id;
      } else if (ctx.message.audio) {
        mediaType = 'audio';
        mediaId = ctx.message.audio.file_id;
      } else if (ctx.message.voice) {
        mediaType = 'voice';
        mediaId = ctx.message.voice.file_id;
      } else if (ctx.message.video_note) {
        mediaType = 'video_note';
        mediaId = ctx.message.video_note.file_id;
      }

      await db.run(`INSERT INTO messages (userId, media_type, media_id, first_name, username) VALUES (?, ?, ?, ?, ?)`,
                   [ctx.from.id, mediaType, mediaId, ctx.from.first_name, ctx.from.username]);
    }

    await ctx.reply('–í–∞—à —Ñ–∞–π–ª —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –≤—ã–ø—É—Å–∫–Ω–æ–≥–æ.');
    suggestionClicked[fromId] = false;

    unreadMessagesCount++;
    console.log(`Admin notified, new unreadMessagesCount: ${unreadMessagesCount}`);
    for (const adminId of adminIds) {
      await ctx.api.sendMessage(adminId, `–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–æ–≥–æ. –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${unreadMessagesCount}`);
    }
  } else {
    if (!adminIds.includes(fromId)) {
      console.log('User is not admin and did not click file submission.');
      await ctx.reply('–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–Ω–∞—á–∞–ª–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É "üìÅ –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ñ–∞–π–ª" –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ñ–∞–π–ª–∞ –æ—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä–∞–º –≤—ã–ø—É—Å–∫–Ω–æ–≥–æ!');
    } else {
      console.log('Admin received a new file.');
      unreadMessagesCount++;
      console.log(`Admin notified, new unreadMessagesCount: ${unreadMessagesCount}`);
      for (const adminId of adminIds) {
        await ctx.api.sendMessage(adminId, `–ü–æ–ª—É—á–µ–Ω –Ω–æ–≤—ã–π —Ñ–∞–π–ª –¥–ª—è –≤—ã–ø—É—Å–∫–Ω–æ–≥–æ. –ù–µ–æ—Ç–≤–µ—á–µ–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π: ${unreadMessagesCount}`);
      }
    }
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—Ç–≤–µ—Ç–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ —á–µ—Ä–µ–∑ inline-–∫–Ω–æ–ø–∫—É
bot.callbackQuery(/^reply-(\d+)$/, async (ctx) => {
  const targetMessageId = ctx.match[1];
  const targetMessage = await db.get('SELECT userId FROM messages WHERE id = ?', [targetMessageId]);

  if (targetMessage) {
    ctx.session.replyToUser = targetMessage.userId;
    ctx.session.replyToMessageId = targetMessageId;
    await ctx.answerCallbackQuery('–í—ã –º–æ–∂–µ—Ç–µ –æ—Ç–≤–µ—Ç–∏—Ç—å —Ç–µ–∫—Å—Ç–æ–º, –∞—É–¥–∏–æ, –≤–∏–¥–µ–æ –∏–ª–∏ —Ñ–æ—Ç–æ.');
  } else {
    await ctx.answerCallbackQuery('–°–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.', { show_alert: true });
  }
});

// –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
bot.catch((err) => {
  const ctx = err.ctx;
  logger.error(`Error while handling update ${ctx.update.update_id}:`, err);
});

// –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
bot.start();
